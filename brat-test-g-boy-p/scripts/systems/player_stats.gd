# player_stats.gd (–•–ê–†–ò–ó–ú–ê –≤–º–µ—Å—Ç–æ CHA + –ü–†–û–ö–ê–ß–ö–ê –û–¢ –î–ï–ô–°–¢–í–ò–ô)
extends Node

signal stats_changed()
signal stat_leveled_up(stat_name: String, new_level: int)

# –ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
var base_stats = {
	"STR": 3,         # –°–∏–ª–∞ - —É—Ä–æ–Ω –±–ª–∏–∂–Ω–µ–≥–æ –±–æ—è
	"AGI": 4,         # –õ–æ–≤–∫–æ—Å—Ç—å - —É–≤–æ—Ä–æ—Ç, —Å–∫–æ—Ä–æ—Å—Ç—å
	"ACC": 2,         # –ú–µ—Ç–∫–æ—Å—Ç—å - —Å—Ç—Ä–µ–ª—å–±–∞
	"LCK": 1,         # –£–¥–∞—á–∞ - –ª—É—Ç, XP
	"INT": 3,         # –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç - –æ–±—É—á–µ–Ω–∏–µ
	"ELEC": 1,        # –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ - –≤–∑–ª–æ–º
	"PICK": 1,        # –í–∑–ª–æ–º –∑–∞–º–∫–æ–≤
	"–•–∞—Ä–∏–∑–º–∞": 2,     # ‚úÖ –•–ê–†–ò–ó–ú–ê (–≤–º–µ—Å—Ç–æ CHA) - –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã, –£–ê
	"DRV": 2,         # –í–æ–∂–¥–µ–Ω–∏–µ
	"STEALTH": 2      # –°–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å
}

# –û–ø—ã—Ç –¥–ª—è –∫–∞–∂–¥–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
var stat_experience = {
	"STR": 0,
	"AGI": 0,
	"ACC": 0,
	"LCK": 0,
	"INT": 0,
	"ELEC": 0,
	"PICK": 0,
	"–•–∞—Ä–∏–∑–º–∞": 0,
	"DRV": 0,
	"STEALTH": 0
}

# –ë–æ–Ω—É—Å—ã –æ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
var equipment_bonuses = {
	"STR": 0,
	"AGI": 0,
	"ACC": 0,
	"defense": 0,
	"melee_damage": 0,
	"ranged_damage": 0
}

func _ready():
	print("üìä –°–∏—Å—Ç–µ–º–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (—Å –•–∞—Ä–∏–∑–º–æ–π)")

# === XP –ò –£–†–û–í–ù–ò ===
func get_xp_for_next_level(current_level: int) -> int:
	return 100 + (current_level - 1) * 50

func add_stat_xp(stat_name: String, amount: int):
	if stat_name not in stat_experience:
		return
	
	stat_experience[stat_name] += amount
	var current_level = base_stats[stat_name]
	var xp_needed = get_xp_for_next_level(current_level)
	
	print("üìà +%d XP –∫ %s (%d/%d)" % [amount, stat_name, stat_experience[stat_name], xp_needed])
	
	while stat_experience[stat_name] >= xp_needed:
		stat_experience[stat_name] -= xp_needed
		base_stats[stat_name] += 1
		current_level = base_stats[stat_name]
		xp_needed = get_xp_for_next_level(current_level)
		
		stat_leveled_up.emit(stat_name, base_stats[stat_name])
		print("‚≠ê %s ‚Üí %d!" % [stat_name, base_stats[stat_name]])
		stats_changed.emit()

# === –î–ï–ô–°–¢–í–ò–Ø –î–õ–Ø –ü–†–û–ö–ê–ß–ö–ò ===
func on_melee_attack():
	add_stat_xp("STR", 5)

func on_ranged_attack():
	add_stat_xp("ACC", 5)

func on_dodge_success():
	add_stat_xp("AGI", 3)

func on_hack_attempt(success: bool):
	add_stat_xp("ELEC", 15 if success else 3)

func on_lockpick_attempt(success: bool):
	add_stat_xp("PICK", 15 if success else 3)

func on_persuasion_attempt(success: bool):
	add_stat_xp("–•–∞—Ä–∏–∑–º–∞", 12 if success else 3)

func on_driving(distance: float):
	var xp = floor(distance / 10.0)
	if xp > 0:
		add_stat_xp("DRV", int(xp))

func on_stealth_action(detected: bool):
	add_stat_xp("STEALTH", 8 if not detected else 2)

func on_theft_attempt(detected: bool, value: int):
	add_stat_xp("STEALTH", (10 + floor(value / 50.0)) if not detected else 2)

# ‚úÖ –ù–û–í–´–ï –î–ï–ô–°–¢–í–ò–Ø –î–õ–Ø –ü–†–û–ö–ê–ß–ö–ò
func on_robbery_attempt(success: bool, value: int):
	"""–û–≥—Ä–∞–±–ª–µ–Ω–∏–µ ‚Üí –°–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å + –í–∑–ª–æ–º"""
	if success:
		add_stat_xp("STEALTH", 15 + int(value / 100.0))
		add_stat_xp("PICK", 10)
	else:
		add_stat_xp("STEALTH", 5)
		add_stat_xp("PICK", 3)

func on_car_theft_attempt(success: bool):
	"""–£–≥–æ–Ω ‚Üí –í–æ–∂–¥–µ–Ω–∏–µ + –í–∑–ª–æ–º"""
	if success:
		add_stat_xp("DRV", 20)
		add_stat_xp("ELEC", 15)
	else:
		add_stat_xp("DRV", 5)
		add_stat_xp("ELEC", 5)

func on_sneaking(distance: float, detected: bool):
	"""–ü–æ–¥–∫—Ä–∞–¥—ã–≤–∞–Ω–∏–µ ‚Üí –°–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å"""
	var xp = int(distance / 5.0)
	if not detected:
		add_stat_xp("STEALTH", 10 + xp)
	else:
		add_stat_xp("STEALTH", 2)

# === –ü–û–õ–£–ß–ò–¢–¨ –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–£ ===
func get_stat(stat_name: String) -> int:
	var base = base_stats.get(stat_name, 0)
	var bonus = equipment_bonuses.get(stat_name, 0)
	return base + bonus

func increase_stat(stat_name: String, amount: int = 1):
	if stat_name in base_stats:
		base_stats[stat_name] += amount
		stats_changed.emit()
		print("üìà %s ‚Üí %d" % [stat_name, base_stats[stat_name]])

# === –ë–û–ù–£–°–´ –û–¢ –≠–ö–ò–ü–ò–†–û–í–ö–ò ===
func recalculate_equipment_bonuses(equipment: Dictionary, items_db):
	for key in equipment_bonuses.keys():
		equipment_bonuses[key] = 0
	
	for slot in equipment.keys():
		var item_name = equipment[slot]
		if item_name:
			var item_data = items_db.get_item(item_name)
			if item_data:
				if "defense" in item_data:
					equipment_bonuses["defense"] += item_data["defense"]
				
				if "damage" in item_data:
					if item_data["type"] == "melee":
						equipment_bonuses["melee_damage"] += item_data["damage"]
					elif item_data["type"] == "ranged":
						equipment_bonuses["ranged_damage"] += item_data["damage"]
	
	stats_changed.emit()
	print("üîÑ –ë–æ–Ω—É—Å—ã –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã")

# === –ë–û–ï–í–´–ï –†–ê–°–ß–Å–¢–´ ===
func calculate_melee_damage() -> int:
	var str_stat = get_stat("STR")
	var weapon_base = equipment_bonuses["melee_damage"]
	if weapon_base == 0:
		weapon_base = 2
	return int(weapon_base + floor(str_stat * 0.6))

func calculate_ranged_damage() -> int:
	var acc_stat = get_stat("ACC")
	var weapon_base = equipment_bonuses["ranged_damage"]
	if weapon_base == 0:
		return 0
	return int(weapon_base * (1.0 + acc_stat * 0.02))

func calculate_evasion() -> int:
	var agi = get_stat("AGI")
	var lck = get_stat("LCK")
	return int(min(75, agi * 2 + floor(lck * 0.2)))

func calculate_move_speed() -> float:
	return 1.0 + get_stat("AGI") * 0.05

func calculate_hit_chance(weapon_accuracy: float = 0.85, target_cover: float = 0.0) -> float:
	var acc = get_stat("ACC")
	var hit = weapon_accuracy * (1.0 + acc * 0.03) * (1.0 - target_cover * 0.25)
	return clamp(hit, 0.05, 0.95)

# === –ù–ê–í–´–ö–ò ===
func calculate_hack_chance(difficulty: float = 0.5) -> float:
	var elec = get_stat("ELEC")
	return clamp(1.0 - (difficulty / (1.0 + elec * 0.08)), 0.05, 0.95)

func calculate_lockpick_chance(tool_bonus: float = 0.0) -> float:
	var pick = get_stat("PICK")
	return clamp(0.2 + pick * 0.04 + tool_bonus, 0.0, 0.95)

func calculate_persuasion_chance(base: float = 0.3) -> float:
	var cha = get_stat("–•–∞—Ä–∏–∑–º–∞")
	return clamp(base + cha * 0.05, 0.0, 0.95)

func calculate_xp_multiplier() -> float:
	var int_stat = get_stat("INT")
	var lck = get_stat("LCK")
	return 1.0 + int_stat * 0.03 + lck * 0.01

func calculate_detection_radius(base_radius: float = 100.0, visibility: float = 1.0) -> float:
	var stealth = get_stat("STEALTH")
	return base_radius * (visibility - stealth * 0.04)

# === –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===
func get_all_stats() -> Dictionary:
	return {
		"base": base_stats.duplicate(),
		"bonuses": equipment_bonuses.duplicate(),
		"combat": {
			"melee_damage": calculate_melee_damage(),
			"ranged_damage": calculate_ranged_damage(),
			"evasion": calculate_evasion(),
			"defense": equipment_bonuses["defense"]
		},
		"skills": {
			"move_speed": calculate_move_speed(),
			"xp_mult": calculate_xp_multiplier()
		}
	}

func get_stats_text() -> String:
	var text = "‚ïê‚ïê‚ïê –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò ‚ïê‚ïê‚ïê\n"
	text += "üí™ –°–∏–ª–∞: %d | ü§∏ –õ–æ–≤–∫–æ—Å—Ç—å: %d | üéØ –ú–µ—Ç–∫–æ—Å—Ç—å: %d\n" % [get_stat("STR"), get_stat("AGI"), get_stat("ACC")]
	text += "üçÄ –£–¥–∞—á–∞: %d | üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: %d | üí¨ –•–∞—Ä–∏–∑–º–∞: %d\n" % [get_stat("LCK"), get_stat("INT"), get_stat("CHA")]
	text += "üíª –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞: %d | üîì –í–∑–ª–æ–º: %d | üöó –í–æ–∂–¥–µ–Ω–∏–µ: %d | ü•∑ –°–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å: %d\n" % [get_stat("ELEC"), get_stat("PICK"), get_stat("DRV"), get_stat("STEALTH")]
	text += "\n‚ïê‚ïê‚ïê –ë–û–ï–í–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ ‚ïê‚ïê‚ïê\n"
	text += "‚öî –£—Ä–æ–Ω –±–ª–∏–∂–Ω–∏–π: %d | üî´ –£—Ä–æ–Ω –¥–∞–ª—å–Ω–∏–π: %d\n" % [calculate_melee_damage(), calculate_ranged_damage()]
	text += "üõ° –ó–∞—â–∏—Ç–∞: %d | üåÄ –£–∫–ª–æ–Ω–µ–Ω–∏–µ: %d%%\n" % [equipment_bonuses["defense"], calculate_evasion()]
	text += "üèÉ –°–∫–æ—Ä–æ—Å—Ç—å: %.2f tiles/sec\n" % calculate_move_speed()
	return text
	# –ü–∞—Ç—á –¥–ª—è player_stats.gd
# 
# –ò–ó–ú–ï–ù–ï–ù–ò–Ø:
# 1. CHA ‚Üí –•–∞—Ä–∏–∑–º–∞ (–≤–º–µ—Å—Ç–æ "–ö—Ä–∞—Å–Ω–æ—Ä–µ—á–∏–µ")
# 2. –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞–≤—ã–∫–∏ –ø—Ä–æ–∫–∞—á–∫–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏–π
#
# –ü–†–ò–ú–ï–ù–ò–¢–¨:
# –ó–∞–º–µ–Ω–∏—Ç–µ –≤ —Ñ–∞–π–ª–µ brat-test1/scripts/systems/player_stats.gd
# —Å—Ç—Ä–æ–∫—É 8:
#   "CHA": 2,      # –ö—Ä–∞—Å–Ω–æ—Ä–µ—á–∏–µ
# –Ω–∞:
#   "CHA": 2,      # –•–∞—Ä–∏–∑–º–∞
#
# –ò —Å—Ç—Ä–æ–∫—É ~180 (–≤ get_stats_text):
#   "üó£ –ö—Ä–∞—Å–Ω–æ—Ä–µ—á–∏–µ: %d"
# –Ω–∞:
#   "üí¨ –•–∞—Ä–∏–∑–º–∞: %d"
#
# –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –î–ï–ô–°–¢–í–ò–ô:

# === –ü–†–û–ö–ê–ß–ö–ê –û–¢ –î–ï–ô–°–¢–í–ò–ô ===

# –û–≥—Ä–∞–±–ª–µ–Ω–∏–µ (–≤—ã–∑—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è)
func on_robbery_success(value: int):
	add_stat_xp("STEALTH", 10 + value / 100)
	add_stat_xp("LCK", 5)
	add_stat_xp("STR", 3)

# –í–∑–ª–æ–º –∑–∞–º–∫–∞
func on_lockpick_success():
	add_stat_xp("PICK", 12)
	add_stat_xp("INT", 3)

# –í–∑–ª–æ–º —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏
func on_hack_success():
	add_stat_xp("ELEC", 15)
	add_stat_xp("INT", 5)

# –£–≥–æ–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—è
func on_car_theft_success():
	add_stat_xp("ELEC", 8)
	add_stat_xp("DRV", 10)
	add_stat_xp("STEALTH", 5)

# –ü–æ–¥–∫—Ä–∞–¥—ã–≤–∞–Ω–∏–µ (–Ω–µ–∑–∞–º–µ—á–µ–Ω–Ω–æ–µ)
func on_sneak_success():
	add_stat_xp("STEALTH", 8)
	add_stat_xp("AGI", 2)

# –ü–æ–¥–∫—Ä–∞–¥—ã–≤–∞–Ω–∏–µ (–æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ)
func on_sneak_detected():
	add_stat_xp("STEALTH", 2)

# –ü–µ—Ä–µ–≥–æ–≤–æ—Ä—ã —Å NPC
func on_negotiation_success():
	add_stat_xp("CHA", 10)
	add_stat_xp("INT", 3)

func on_negotiation_fail():
	add_stat_xp("CHA", 3)

# –í–æ–∂–¥–µ–Ω–∏–µ (–∑–∞ –∫–∞–∂–¥—ã–µ 100 –º–µ—Ç—Ä–æ–≤)
func on_driving_distance(meters: float):
	var xp = int(meters / 100.0)
	if xp > 0:
		add_stat_xp("DRV", xp)

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏–ª—ã (–ø–µ—Ä–µ–Ω–æ—Å —Ç—è–∂–µ—Å—Ç–µ–π, –¥—Ä–∞–∫–∞)
func on_strength_action():
	add_stat_xp("STR", 5)

# –ê–∫—Ä–æ–±–∞—Ç–∏–∫–∞ (—É–∫–ª–æ–Ω–µ–Ω–∏–µ, –ø—Ä—ã–∂–∫–∏)
func on_agility_action():
	add_stat_xp("AGI", 5)
