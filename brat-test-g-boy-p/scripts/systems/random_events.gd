# random_events.gd (–ò–°–ü–†–ê–í–õ–ï–ù–û - –°–û–ë–´–¢–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢!)
extends Node

signal event_triggered(event_type: String, event_data: Dictionary)

var player_stats
var items_db

func _ready():
	player_stats = get_node_or_null("/root/PlayerStats")
	items_db = get_node_or_null("/root/ItemsDB")
	print("üé≤ –°–∏—Å—Ç–µ–º–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–≤–µ–ª–∏—á–µ–Ω —à–∞–Ω—Å —Å–æ–±—ã—Ç–∏–π
func trigger_random_event(location: String, player_data: Dictionary, main_node: Node) -> bool:
	"""
	–¢—Ä–∏–≥–≥–µ—Ä–∏—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ –ª–æ–∫–∞—Ü–∏–∏
	–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ
	"""
	var event_chance = randf()
	var chance_threshold = get_location_danger(location)
	
	print("üé≤ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤ %s: %.2f vs %.2f" % [location, event_chance, chance_threshold])
	
	if event_chance > chance_threshold:
		print("   ‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ")
		return false
	
	var event_type = choose_event_type(location)
	print("   ‚úÖ –°–æ–±—ã—Ç–∏–µ: %s" % event_type)
	
	match event_type:
		"combat":
			start_combat_event(location, player_data, main_node)
			return true
		"find_item":
			find_item_event(player_data, main_node)
			return true
		"find_money":
			find_money_event(player_data, main_node)
			return true
		"meet_npc":
			meet_npc_event(location, player_data, main_node)
			return true
	
	return false

# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–≤–µ–ª–∏—á–µ–Ω—ã —à–∞–Ω—Å—ã —Å–æ–±—ã—Ç–∏–π (–º–µ–Ω—å—à–µ = –±–æ–ª—å—à–µ —Å–æ–±—ã—Ç–∏–π)
func get_location_danger(location: String) -> float:
	"""–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Ä–æ–≥ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Å–æ–±—ã—Ç–∏—è (—á–µ–º –Ω–∏–∂–µ - —Ç–µ–º –±–æ–ª—å—à–µ —Å–æ–±—ã—Ç–∏–π)"""
	match location:
		"–û–ë–©–ï–ñ–ò–¢–ò–ï":
			return 0.70  # –ë—ã–ª–æ 0.95 -> 30% —Å–æ–±—ã—Ç–∏–π –≤–º–µ—Å—Ç–æ 5%
		"–õ–ê–†–Å–ö":
			return 0.60  # –ë—ã–ª–æ 0.90 -> 40% —Å–æ–±—ã—Ç–∏–π
		"–ì–ê–†–ê–ñ":
			return 0.55  # –ë—ã–ª–æ 0.85 -> 45% —Å–æ–±—ã—Ç–∏–π
		"–†–´–ù–û–ö":
			return 0.50  # –ë—ã–ª–æ 0.80 -> 50% —Å–æ–±—ã—Ç–∏–π
		"–í–û–ö–ó–ê–õ":
			return 0.45  # –ë—ã–ª–æ 0.75 -> 55% —Å–æ–±—ã—Ç–∏–π
		"–£–õ–ò–¶–ê":
			return 0.40  # –ë—ã–ª–æ 0.70 -> 60% —Å–æ–±—ã—Ç–∏–π
		"–ü–û–†–¢":
			return 0.30  # –ë—ã–ª–æ 0.60 -> 70% —Å–æ–±—ã—Ç–∏–π
		"–ë–û–õ–¨–ù–ò–¶–ê":
			return 0.65
		"–§–°–ë":
			return 0.80  # –ü–æ—á—Ç–∏ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π
		"–ë–ê–†":
			return 0.50
		"–ê–í–¢–û–°–ê–õ–û–ù":
			return 0.60
		_:
			return 0.55

func choose_event_type(location: String) -> String:
	"""–í—ã–±–∏—Ä–∞–µ—Ç —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ª–æ–∫–∞—Ü–∏–∏"""
	var roll = randf()
	
	match location:
		"–£–õ–ò–¶–ê":
			if roll < 0.4:
				return "combat"
			elif roll < 0.6:
				return "meet_npc"
			elif roll < 0.8:
				return "find_money"
			else:
				return "find_item"
		
		"–ü–û–†–¢":
			if roll < 0.5:
				return "combat"
			elif roll < 0.7:
				return "find_item"
			else:
				return "meet_npc"
		
		"–í–û–ö–ó–ê–õ":
			if roll < 0.3:
				return "combat"
			elif roll < 0.6:
				return "meet_npc"
			else:
				return "find_money"
		
		"–†–´–ù–û–ö":
			if roll < 0.2:
				return "combat"
			elif roll < 0.5:
				return "meet_npc"
			elif roll < 0.8:
				return "find_item"
			else:
				return "find_money"
		
		"–ë–ê–†":
			if roll < 0.4:
				return "meet_npc"
			elif roll < 0.6:
				return "combat"
			else:
				return "find_money"
		
		_:
			if roll < 0.3:
				return "find_money"
			elif roll < 0.6:
				return "meet_npc"
			else:
				return "find_item"

func start_combat_event(location: String, player_data: Dictionary, main_node: Node):
	"""–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ–µ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ"""
	var enemy_type = choose_enemy_type(location)
	
	var enemy_names = {
		"gopnik": "–ì–æ–ø–Ω–∏–∫",
		"drunkard": "–ü—å—è–Ω—ã–π",
		"thug": "–•—É–ª–∏–≥–∞–Ω",
		"bandit": "–ë–∞–Ω–¥–∏—Ç",
		"guard": "–û—Ö—Ä–∞–Ω–Ω–∏–∫",
		"boss": "–ì–ª–∞–≤–∞—Ä—å"
	}
	
	main_node.show_message("‚ö†Ô∏è " + enemy_names.get(enemy_type, "–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫") + " —Ö–æ—á–µ—Ç –ø–æ–¥—Ä–∞—Ç—å—Å—è!")
	
	await main_node.get_tree().create_timer(1.5).timeout
	
	# –ò—Å–ø–æ–ª—å–∑—É–µ–º battle_manager
	if main_node.battle_manager:
		main_node.battle_manager.start_battle(main_node, enemy_type, false)
	else:
		print("‚ùå Battle manager –Ω–µ –Ω–∞–π–¥–µ–Ω!")

func choose_enemy_type(location: String) -> String:
	"""–í—ã–±–∏—Ä–∞–µ—Ç —Ç–∏–ø –≤—Ä–∞–≥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ª–æ–∫–∞—Ü–∏–∏"""
	var roll = randf()
	
	match location:
		"–£–õ–ò–¶–ê":
			if roll < 0.5:
				return "gopnik"
			elif roll < 0.8:
				return "thug"
			else:
				return "drunkard"
		
		"–ü–û–†–¢":
			if roll < 0.4:
				return "bandit"
			elif roll < 0.7:
				return "thug"
			else:
				return "guard"
		
		"–í–û–ö–ó–ê–õ":
			if roll < 0.6:
				return "gopnik"
			else:
				return "thug"
		
		"–†–´–ù–û–ö":
			if roll < 0.6:
				return "gopnik"
			elif roll < 0.9:
				return "thug"
			else:
				return "drunkard"
		
		"–ë–ê–†":
			if roll < 0.5:
				return "drunkard"
			else:
				return "gopnik"
		
		_:
			if roll < 0.7:
				return "gopnik"
			else:
				return "thug"

func find_item_event(player_data: Dictionary, main_node: Node):
	"""–°–æ–±—ã—Ç–∏–µ –Ω–∞—Ö–æ–¥–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞"""
	var possible_items = [
		"–ë—É–ª–∫–∞", "–°–∏–≥–∞—Ä–µ—Ç—ã", "–ü–∏–≤–æ", "–ü—Ä–æ–¥—É–∫—Ç—ã", "–ß–∏–ø—Å—ã"
	]
	
	var luck = player_stats.get_stat("LCK") if player_stats else 1
	var rare_chance = 0.15 + luck * 0.03  # –£–≤–µ–ª–∏—á–µ–Ω —à–∞–Ω—Å —Ä–µ–¥–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
	
	var found_item = ""
	
	if randf() < rare_chance:
		var rare_items = ["–ö–æ–∂–∞–Ω–∫–∞", "–ë–∏—Ç–∞", "–û—Ç–º—ã—á–∫–∞", "–ê–ø—Ç–µ—á–∫–∞", "–ö–µ–ø–∫–∞"]
		found_item = rare_items[randi() % rare_items.size()]
		main_node.show_message("‚ú® –†–µ–¥–∫–∞—è –Ω–∞—Ö–æ–¥–∫–∞: " + found_item + "!")
	else:
		found_item = possible_items[randi() % possible_items.size()]
		main_node.show_message("üîç –ù–∞—à–ª–∏: " + found_item)
	
	player_data["inventory"].append(found_item)
	
	if player_stats:
		player_stats.add_stat_xp("LCK", 5)
	
	emit_signal("event_triggered", "find_item", {"item": found_item})

func find_money_event(player_data: Dictionary, main_node: Node):
	"""–°–æ–±—ã—Ç–∏–µ –Ω–∞—Ö–æ–¥–∫–∏ –¥–µ–Ω–µ–≥"""
	var luck = player_stats.get_stat("LCK") if player_stats else 1
	var base_amount = randi_range(20, 80)  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 10-50
	var amount = base_amount + luck * 10  # –£–≤–µ–ª–∏—á–µ–Ω –±–æ–Ω—É—Å –æ—Ç —É–¥–∞—á–∏
	
	player_data["balance"] += amount
	main_node.show_message("üí∞ –ù–∞—à–ª–∏ " + str(amount) + " —Ä—É–±.!")
	main_node.update_ui()
	
	if player_stats:
		player_stats.add_stat_xp("LCK", 3)
	
	emit_signal("event_triggered", "find_money", {"amount": amount})

func meet_npc_event(location: String, player_data: Dictionary, main_node: Node):
	"""–°–æ–±—ã—Ç–∏–µ –≤—Å—Ç—Ä–µ—á–∏ —Å NPC"""
	var dialogues = get_location_dialogues(location)
	var dialogue = dialogues[randi() % dialogues.size()]
	
	main_node.show_message("üí¨ " + dialogue)
	
	emit_signal("event_triggered", "meet_npc", {"dialogue": dialogue})

func get_location_dialogues(location: String) -> Array:
	"""–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏"""
	match location:
		"–£–õ–ò–¶–ê":
			return [
				"–ü—Ä–æ—Ö–æ–∂–∏–π: '–≠–π, –Ω–µ –Ω–∞–π–¥—ë—Ç—Å—è –ø–∞—Ä—ã —Ä—É–±–ª–µ–π?'",
				"–°—Ç–∞—Ä–∏–∫: '–ú–æ–ª–æ–¥—ë–∂—å –ø–æ—à–ª–∞ –Ω–µ —Ç–∞...'",
				"–ö–µ–Ω—Ç: '–°–ª—ã—à–∞–ª, –Ω–∞ –ø–æ—Ä—Ç—É –¥–≤–∏–∂—É—Ö–∞...'",
				"–î–µ–≤—É—à–∫–∞: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –≥–¥–µ –≤–æ–∫–∑–∞–ª?'",
				"–ü–æ–¥—Ä–æ—Å—Ç–æ–∫: '–£ —Ç–µ–±—è —Å–∏–≥–∞—Ä–µ—Ç—ã –µ—Å—Ç—å?'",
				"–ë–æ–º–∂: '–í–∞—â–µ –≤—Å—ë –ø–ª–æ—Ö–æ —Å—Ç–∞–ª–æ...'",
				"–ë—Ä–∞—Ç–∞–Ω: '–ó–µ–º–ª—è–∫, —Ç—ã –æ—Ç–∫—É–¥–∞?'"
			]
		
		"–í–û–ö–ó–ê–õ":
			return [
				"–ö–æ–Ω—Ç–∞–∫—Ç: '–ò—â–µ—à—å —Ä–∞–±–æ—Ç—É? –ï—Å—Ç—å –¥–µ–ª—å—Ü–µ...'",
				"–ú–µ–Ω—Ç: '–î–æ–∫—É–º–µ–Ω—Ç—ã –µ—Å—Ç—å?'",
				"–ë–∞—Ä—ã–≥–∞: '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä!'",
				"–¶—ã–≥–∞–Ω–∫–∞: '–ü–æ–≥–∞–¥–∞—Ç—å, –∫—Ä–∞—Å–∞–≤—á–∏–∫?'",
				"–ü—Ä–æ–≤–æ–¥–Ω–∏–∫: '–ü–æ–µ–∑–¥ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç!'",
				"–ü–∞—Å—Å–∞–∂–∏—Ä: '–ö–∞–∫–æ–π —Ö–∞–æ—Å –Ω–∞ –≤–æ–∫–∑–∞–ª–µ...'"
			]
		
		"–†–´–ù–û–ö":
			return [
				"–¢–æ—Ä–≥–æ–≤–µ—Ü: '–ì–ª—è–¥–∏, –∫–∞–∫–æ–π —Ç–æ–≤–∞—Ä!'",
				"–ë–∞–±–∫–∞: '–ö—É–ø–∏ –æ–≥—É—Ä—á–∏–∫–æ–≤!'",
				"–ë—Ä–∞—Ç–∞–Ω: '–ü–æ–º–æ–≥–∏ —Å –≥—Ä—É–∑–æ–º...'",
				"–ü—Ä–æ–¥–∞–≤–µ—Ü: '–°–≤–µ–∂–µ–µ –º—è—Å–æ!'",
				"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: '–¶–µ–Ω—ã –∫—É—Å–∞—é—Ç—Å—è...'",
				"–û—Ö—Ä–∞–Ω–Ω–∏–∫: '–ù–µ –≤–æ—Ä—É–π, —â–∞—Å –ø–æ–π–º–∞—é!'"
			]
		
		"–ü–û–†–¢":
			return [
				"–ì—Ä—É–∑—á–∏–∫: '–ü–æ—Ä—Ç - –Ω–µ –º–µ—Å—Ç–æ –¥–ª—è –ø—Ä–æ–≥—É–ª–æ–∫'",
				"–®—ë–ø–æ—Ç: '–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—à—å—Å—è –æ—Ä—É–∂–∏–µ–º?'",
				"–û—Ö—Ä–∞–Ω–Ω–∏–∫: '–ß–µ–≥–æ —Ç—É—Ç —à–ª—è–µ—à—å—Å—è?'",
				"–ú–æ—Ä—è–∫: '–ú–æ—Ä–µ –∑–æ–≤—ë—Ç...'",
				"–ö–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥–∏—Å—Ç: '–ï—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –¥–µ–ª—å—Ü–µ...'",
				"–†–∞–±–æ—á–∏–π: '–ì—Ä—É–∑—ã –Ω–µ —Å–∞–º–∏ —Å–µ–±—è —Ç–∞—Å–∫–∞—é—Ç!'"
			]
		
		"–ë–ê–†":
			return [
				"–ë–∞—Ä–º–µ–Ω: '–ß—Ç–æ –±—É–¥–µ—à—å?'",
				"–ü—å—è–Ω–∏—Ü–∞: '–ù–∞–ª–µ–π –µ—â—ë!'",
				"–ë—Ä–∞—Ç–∞–Ω: '–ó–∞ –≤—Å—Ç—Ä–µ—á—É!'",
				"–î–µ–≤—É—à–∫–∞: '–£–≥–æ—Å—Ç–∏—à—å?'",
				"–û—Ö—Ä–∞–Ω–Ω–∏–∫: '–°–ø–æ–∫–æ–π–Ω–æ, –ø–∞—Ü–∞–Ω—ã!'",
				"–ö–µ–Ω—Ç: '–°–ª—ã—à–∞–ª –Ω–æ–≤–æ—Å—Ç–∏?'"
			]
		
		"–ì–ê–†–ê–ñ":
			return [
				"–ú–µ—Ö–∞–Ω–∏–∫: '–ú–∞—à–∏–Ω–∞ —Ö—Ä–µ–Ω–æ–≤–∞—è —Å–æ–≤—Å–µ–º...'",
				"–ü–∞—Ä–µ–Ω—å: '–ü–æ–º–æ–≥–∏ –æ—Ç–∫—Ä—É—Ç–∏—Ç—å?'",
				"–ê–≤—Ç–æ–ª—é–±–∏—Ç–µ–ª—å: '–î–≤–∏–∂–æ–∫ –Ω–µ —Ç—è–Ω–µ—Ç...'",
				"–ú–∞—Å—Ç–µ—Ä: '–ó–æ–ª–æ—Ç—ã–µ —Ä—É–∫–∏ –Ω—É–∂–Ω—ã!'",
				"–í–æ–¥–∏—Ç–µ–ª—å: '–ó–∞–ø—á–∞—Å—Ç–∏ –¥–æ—Ä–æ–≥–∏–µ —Å—Ç–∞–ª–∏...'"
			]
		
		"–ê–í–¢–û–°–ê–õ–û–ù":
			return [
				"–ü—Ä–æ–¥–∞–≤–µ—Ü: '–°–º–æ—Ç—Ä–∏ –∫–∞–∫–∞—è –∫—Ä–∞—Å–æ—Ç–∞!'",
				"–ö–ª–∏–µ–Ω—Ç: '–î–æ—Ä–æ–≥–æ –≤—Å—ë...'",
				"–ú–µ–Ω–µ–¥–∂–µ—Ä: '–ú–æ–≥—É —Å–∫–∏–¥–∫—É —Å–¥–µ–ª–∞—Ç—å!'",
				"–ú–µ—Ö–∞–Ω–∏–∫: '–ú–∞—à–∏–Ω–∞ –æ–≥–æ–Ω—å!'",
				"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: '–¢–∞—á–∫–∞ –º–µ—á—Ç—ã!'"
			]
		
		_:
			return [
				"–ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü –∫–∏–≤–∞–µ—Ç",
				"–ö—Ç–æ-—Ç–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç –º–∏–º–æ",
				"–¢–∏—Ö–æ –≤–æ–∫—Ä—É–≥...",
				"–ù–∏—á–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ"
			]
