# main.gd (–ò–°–ü–†–ê–í–õ–ï–ù–û - –ø–µ—Ä–≤—ã–π –±–æ–π —Ç–æ–ª—å–∫–æ —Ä–∞–∑)
extends Node2D

# ===== –ö–û–ú–ü–û–ù–ï–ù–¢–´ =====
var game_initializer
var input_handler

# ===== –ú–ï–ù–ï–î–ñ–ï–†–´ =====
var map_manager
var ui_controller
var action_handler
var menu_manager
var clicker_system
var districts_menu_manager
var battle_manager
var grid_movement_manager

# ===== –°–ò–°–¢–ï–ú–´ (AUTOLOAD) =====
var items_db
var building_system
var player_stats
var quest_system
var random_events
var inventory_manager
var gang_manager
var save_manager
var districts_system
var simple_jobs
var hospital_system
var time_system

# ===== –ò–ì–†–û–í–´–ï –°–ò–°–¢–ï–ú–´ =====
var grid_system
var movement_system

# ===== –°–û–°–¢–û–Ø–ù–ò–ï –ò–ì–†–´ =====
var current_location = null
var menu_open = false
var first_battle_started = false

# ===== –î–ê–ù–ù–´–ï –õ–û–ö–ê–¶–ò–ô =====
var locations = {
	"–û–ë–©–ï–ñ–ò–¢–ò–ï": {"position": Vector2(500, 200), "actions": ["–û—Ç–¥–æ—Ö–Ω—É—Ç—å", "–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –¥—Ä—É–≥–æ–º", "–í–∑—è—Ç—å –≤–µ—â–∏"], "grid_square": "6_2"},
	"–õ–ê–†–Å–ö": {"position": Vector2(200, 350), "actions": ["–ö—É–ø–∏—Ç—å –ø–∏–≤–æ (30—Ä)", "–ö—É–ø–∏—Ç—å —Å–∏–≥–∞—Ä–µ—Ç—ã (15—Ä)", "–ö—É–ø–∏—Ç—å –∫–µ–ø–∫—É (50—Ä)"], "grid_square": "2_4"},
	"–í–û–ö–ó–ê–õ": {"position": Vector2(100, 150), "actions": ["–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç", "–í—Å—Ç—Ä–µ—Ç–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", "–û—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è"], "grid_square": "1_1"},
	"–ì–ê–†–ê–ñ": {"position": Vector2(550, 650), "actions": ["–ö—É–ø–∏—Ç—å –±–∏—Ç—É (100—Ä)", "–ü–æ–º–æ—á—å –º–µ—Ö–∞–Ω–∏–∫—É", "–í–∑—è—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"], "grid_square": "9_8"},
	"–†–´–ù–û–ö": {"position": Vector2(300, 850), "actions": ["–ö—É–ø–∏—Ç—å –∫–æ–∂–∞–Ω–∫—É (200—Ä)", "–ü—Ä–æ–¥–∞—Ç—å –≤–µ—â—å", "–£–∑–Ω–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏"], "grid_square": "5_10"},
	"–ü–û–†–¢": {"position": Vector2(600, 450), "actions": ["–ö—É–ø–∏—Ç—å –ü–ú (500—Ä)", "–ö—É–ø–∏—Ç—å –æ—Ç–º—ã—á–∫—É (100—Ä)", "–£–π—Ç–∏"], "grid_square": "10_5"},
	"–£–õ–ò–¶–ê": {"position": Vector2(150, 1050), "actions": ["–ü—Ä–æ–≥—É–ª—è—Ç—å—Å—è", "–í—Å—Ç—Ä–µ—Ç–∏—Ç—å –∑–Ω–∞–∫–æ–º–æ–≥–æ", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∫—Ä—É–≥"], "grid_square": "2_13"},
	"–ë–û–õ–¨–ù–ò–¶–ê": {"position": Vector2(400, 500), "actions": ["–õ–µ—á–∏—Ç—å—Å—è", "–ö—É–ø–∏—Ç—å –∞–ø—Ç–µ—á–∫—É (100—Ä)", "–£–π—Ç–∏"], "grid_square": "6_6"},
	"–§–°–ë": {"position": Vector2(350, 300), "actions": ["üí∞ –î–∞—Ç—å –≤–∑—è—Ç–∫—É", "üö™ –£–π—Ç–∏"], "grid_square": "5_3"}  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û
	
}

# ===== –î–ê–ù–ù–´–ï –ò–ì–†–û–ö–ê =====
var player_data = {
	"balance": 150,
	"health": 100,
	"reputation": 0,
	"completed_quests": [],
	"equipment": {"helmet": null, "armor": null, "melee": null, "ranged": null, "gadget": null},
	"inventory": ["–ü–∞—á–∫–∞ —Å–∏–≥–∞—Ä–µ—Ç", "–ë—É–ª–∫–∞", "–ù–æ–∂"],
	"pockets": [null, null, null],
	"current_square": "6_2",
	"first_battle_completed": false  # ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ!
}

# ===== –î–ê–ù–ù–´–ï –ë–ê–ù–î–´ =====
var gang_members = [
	{
		"name": "–ì–ª–∞–≤–Ω—ã–π (—Ç—ã)",
		"health": 100,
		"strength": 10,
		"equipment": {"helmet": null, "armor": null, "melee": null, "ranged": null, "gadget": null},
		"inventory": [],
		"pockets": [null, null, null],
		"is_active": true  # ‚úÖ –ì–ª–∞–≤–Ω—ã–π –≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω
	}
]

func _ready():
	# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
	game_initializer = preload("res://scripts/core/game_initializer.gd").new()
	input_handler = preload("res://scripts/core/input_handler.gd").new()
	
	# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
	game_initializer.load_autoload_systems(self)
	game_initializer.setup_grid_and_movement(self)
	game_initializer.initialize_managers(self)
	game_initializer.setup_game_systems(self)
	game_initializer.connect_signals(self)
	
	show_intro_text()
	print("‚úÖ –ò–≥—Ä–∞ –≥–æ—Ç–æ–≤–∞! (–†–ï–§–ê–ö–¢–û–†–ò–ù–ì)")

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –í–í–û–î–ê =====
func _unhandled_input(event):
	if input_handler.handle_input(event, self):
		get_viewport().set_input_as_handled()

# ===== –ú–ï–ù–Æ –õ–û–ö–ê–¶–ò–ô =====
func show_location_menu(location_name: String):
	current_location = location_name
	menu_open = true
	print("üè¢ –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é: " + location_name)
	
	var old_menu = get_node_or_null("BuildingMenu")
	if old_menu:
		old_menu.queue_free()
		await get_tree().process_frame
	
	var building_menu_script = load("res://scripts/ui/building_menu.gd")
	var building_menu = building_menu_script.new()
	building_menu.name = "BuildingMenu"
	add_child(building_menu)
	
	var actions = locations[location_name]["actions"]
	building_menu.setup(location_name, actions)
	
	building_menu.action_selected.connect(func(action_index):
		handle_location_action(action_index)
	)
	
	building_menu.menu_closed.connect(func():
		close_location_menu()  # ‚úÖ –¢–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–µ "–ó–∞–∫—Ä—ã—Ç—å"
)

func handle_location_action(action_index: int):
	if current_location == null:
		return
	action_handler.handle_location_action(current_location, action_index, self)
	if time_system:
		var time_cost = randi_range(5, 15)
		time_system.add_minutes(time_cost)

func close_location_menu():
	var layer = get_node_or_null("BuildingMenu")
	if layer:
		layer.queue_free()
	menu_open = false
	current_location = null
	print("‚úÖ –ú–µ–Ω—é –ª–æ–∫–∞—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç–æ")

func on_location_clicked(location_name: String):
	show_location_menu(location_name)
	action_handler.trigger_location_events(location_name, self)

# ===== –ö–ù–û–ü–ö–ò –ù–ò–ñ–ù–ï–ô –ü–ê–ù–ï–õ–ò =====
func on_bottom_button_pressed(button_name: String):
	match button_name:
		"–ë–∞–Ω–¥–∞":
			menu_manager.show_gang_menu(self)
		"–†–∞–π–æ–Ω—ã":
			districts_menu_manager.show_districts_menu(self)
		"–ö–≤–µ—Å—Ç—ã":
			menu_manager.show_quests_menu(self)
		"–ú–µ–Ω—é":
			menu_manager.show_main_menu(self)

# ===== –û–ë–ù–û–í–õ–ï–ù–ò–ï UI =====
func update_ui():
	ui_controller.update_ui()
	clicker_system.player_data = player_data
	update_time_ui()

func update_time_ui():
	if not ui_controller or not time_system:
		return
	var ui_layer = ui_controller.get_ui_layer()
	var date_label = ui_layer.get_node_or_null("DateLabel")
	if date_label:
		date_label.text = time_system.get_date_time_string()

func show_message(text: String):
	ui_controller.show_message(text, self)

# ===== –°–û–ë–´–¢–ò–Ø –í–†–ï–ú–ï–ù–ò =====
func _on_time_changed(_hour: int, _minute: int):
	update_time_ui()

func _on_day_changed(_day: int, _month: int, _year: int):
	show_message("üìÖ –ù–æ–≤—ã–π –¥–µ–Ω—å!")
	if districts_system:
		var daily_income = districts_system.get_total_player_income()
		if daily_income > 0:
			player_data["balance"] += daily_income
			show_message("üí∞ –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥: +" + str(daily_income) + " —Ä—É–±.")
			update_ui()

func _on_time_of_day_changed(period: String):
	var messages = {
		"—É—Ç—Ä–æ": "üåÖ –ù–∞—Å—Ç—É–ø–∏–ª–æ —É—Ç—Ä–æ",
		"–¥–µ–Ω—å": "‚òÄÔ∏è –î–µ–Ω—å",
		"–≤–µ—á–µ—Ä": "üåÜ –ù–∞—Å—Ç—É–ø–∏–ª –≤–µ—á–µ—Ä",
		"–Ω–æ—á—å": "üåô –ù–æ—á—å"
	}
	if period in messages:
		show_message(messages[period])

# ===== –í–°–¢–£–ü–õ–ï–ù–ò–ï =====
func show_intro_text():
	var intro_layer = CanvasLayer.new()
	intro_layer.name = "IntroLayer"
	add_child(intro_layer)
	
	var label = Label.new()
	label.text = "–¢–≤–µ—Ä—å. –ù–∞—á–∞–ª–æ –ø—É—Ç–∏.\n02.03.1992, 10:00"
	label.position = Vector2(150, 500)
	label.add_theme_font_size_override("font_size", 32)
	label.add_theme_color_override("font_color", Color.WHITE)
	label.horizontal_alignment = HORIZONTAL_ALIGNMENT_CENTER
	intro_layer.add_child(label)
	
	await get_tree().create_timer(3.0).timeout
	intro_layer.queue_free()
	
	# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Ç–æ–ª—å–∫–æ —Ñ–ª–∞–≥, –Ω–æ –∏ player_data
	if not first_battle_started and not player_data.get("first_battle_completed", false):
		first_battle_started = true
		player_data["first_battle_completed"] = true  # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –¥–∞–Ω–Ω—ã–µ
		
		await get_tree().create_timer(1.0).timeout
		show_message("‚ö†Ô∏è –û–ë–£–ß–ï–ù–ò–ï: –í—Å—Ç—Ä–µ—Ç–∏–ª—Å—è –≥–æ–ø–Ω–∏–∫!")
		await get_tree().create_timer(1.5).timeout
		
		if battle_manager:
			battle_manager.start_battle(self, "gopnik", false)

# ===== –£–†–û–í–ï–ù–¨ –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö =====
func show_level_up_message(stat_name: String, new_level: int):
	var level_up_layer = CanvasLayer.new()
	level_up_layer.name = "LevelUpLayer"
	add_child(level_up_layer)
	
	var bg = ColorRect.new()
	bg.size = Vector2(500, 200)
	bg.position = Vector2(110, 540)
	bg.color = Color(0.1, 0.3, 0.1, 0.95)
	level_up_layer.add_child(bg)
	
	var title = Label.new()
	title.text = "‚≠ê –ü–û–í–´–®–ï–ù–ò–ï –£–†–û–í–ù–Ø! ‚≠ê"
	title.position = Vector2(200, 560)
	title.add_theme_font_size_override("font_size", 26)
	title.add_theme_color_override("font_color", Color(1.0, 1.0, 0.3, 1.0))
	level_up_layer.add_child(title)
	
	var stat_label = Label.new()
	stat_label.text = stat_name + " ‚Üí " + str(new_level)
	stat_label.position = Vector2(280, 620)
	stat_label.add_theme_font_size_override("font_size", 32)
	stat_label.add_theme_color_override("font_color", Color(0.3, 1.0, 0.3, 1.0))
	level_up_layer.add_child(stat_label)
	
	var timer = Timer.new()
	timer.wait_time = 3.0
	timer.one_shot = true
	add_child(timer)
	timer.timeout.connect(func():
		if level_up_layer and is_instance_valid(level_up_layer):
			level_up_layer.queue_free()
		timer.queue_free()
	)
	timer.start()

# ===== –ö–í–ï–°–¢–´ =====
func on_quest_completed(quest_id: String):
	if not quest_system:
		return
	var reward = null
	if quest_system.available_quests.has(quest_id):
		reward = quest_system.available_quests[quest_id]["reward"]
	if reward:
		if reward.has("money"):
			player_data["balance"] += reward["money"]
		if reward.has("reputation"):
			player_data["reputation"] += reward["reputation"]
		var reward_text = "‚úÖ –ö–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω!\n"
		if reward.has("money"):
			reward_text += "üí∞ +" + str(reward["money"]) + " —Ä—É–±.\n"
		if reward.has("reputation"):
			reward_text += "‚≠ê +" + str(reward["reputation"]) + " —Ä–µ–ø—É—Ç–∞—Ü–∏–∏"
		show_message(reward_text)
		update_ui()

# ===== –†–ê–ô–û–ù–´ =====
func on_district_captured(district_name: String, by_gang: String):
	districts_menu_manager.show_district_captured_notification(self, district_name, by_gang)

# ===== –ë–û–ô =====
func show_enemy_selection_menu():
	battle_manager.show_enemy_selection_menu(self)

func start_battle(enemy_type: String = "gopnik"):
	battle_manager.start_battle(self, enemy_type)

func show_districts_menu():
	districts_menu_manager.show_districts_menu(self)

# ‚úÖ –ó–ê–ì–†–£–ó–ö–ê –ò–ì–†–´ (–ò–°–ü–†–ê–í–õ–ï–ù–û)
func load_game_from_data(save_data: Dictionary):
	if save_data.is_empty():
		show_message("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏!")
		return
	
	# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä–æ–∫–∞
	if save_data.has("player"):
		var player = save_data["player"]
		player_data["balance"] = player.get("balance", 0)
		player_data["health"] = player.get("health", 100)
		player_data["reputation"] = player.get("reputation", 0)
		player_data["completed_quests"] = player.get("completed_quests", [])
		player_data["equipment"] = player.get("equipment", {}).duplicate(true)
		player_data["inventory"] = player.get("inventory", []).duplicate(true)
		player_data["pockets"] = player.get("pockets", [null, null, null]).duplicate(true)
		
		# ‚úÖ –í–ê–ñ–ù–û: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–≤–æ–≥–æ –±–æ—è
		player_data["first_battle_completed"] = player.get("first_battle_completed", true)
		
		if player.has("current_square"):
			player_data["current_square"] = player["current_square"]
	
	# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–Ω–¥—É
	if save_data.has("gang"):
		gang_members = save_data["gang"].duplicate(true)
		
		# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º is_active
		for i in range(gang_members.size()):
			if not gang_members[i].has("is_active"):
				gang_members[i]["is_active"] = (i == 0)
	
	# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–≤–µ—Å—Ç—ã –∏ —Ä–∞–π–æ–Ω—ã
	if save_manager:
		if save_data.has("quests"):
			save_manager.restore_quest_data(save_data["quests"])
		
		if save_data.has("districts"):
			save_manager.restore_districts_data(save_data["districts"])
	
	update_ui()
	show_message("‚úÖ –ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
	print("üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ - –ø–µ—Ä–≤—ã–π –±–æ–π: %s" % player_data["first_battle_completed"])

func get_save_data() -> Dictionary:
	return {
		"player_data": player_data,
		"gang_members": gang_members
	}
